{"version":3,"sources":["App.js","serviceWorker.js","index.js","loader.svg"],"names":["FontAwesome","require","App","fetchQuote","a","setState","quoteText","quoteAuthor","quote","fetch","proxyUrl","response","json","data","length","longQuoteClass","isLoading","tweetQuote","state","author","twitterUrl","window","open","this","src","loader","alt","className","name","size","style","fontSize","marginRight","onClick","id","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"qUAGMA,EAAcC,EAAQ,IA8EbC,E,kDA1Eb,aAAc,IAAD,8BACX,gBAUFC,WAXa,sBAWF,gCAAAC,EAAA,6DACT,EAAKC,SAAS,CAACC,UAAU,GAAGC,YAAY,KACzB,8CACF,yEACPC,EAAM,CAACF,UAAU,GAAGC,YAAY,IAJ7B,kBAMcE,MAAMC,qHANpB,cAMDC,EANC,iBAOUA,EAASC,OAPnB,QAODC,EAPC,OAQPL,EAAMF,UAAUO,EAAKP,UACrBE,EAAMD,YAAYM,EAAKN,YACpBM,EAAKP,UAAUQ,OAAO,IACvB,EAAKT,SAAS,CAACU,eAAe,eAE9B,EAAKV,SAAS,CAACU,eAAe,eAbzB,kDAgBP,EAAKZ,aAhBE,yBAkBP,EAAKE,SAAS,CAACW,WAAU,IACL,KAApBR,EAAMD,YACN,EAAKF,SAAS,CAACC,UAAUE,EAAMF,UAAUC,YAAY,WACrD,EAAKF,SAAS,CAACC,UAAUE,EAAMF,UAAUC,YAAYC,EAAMD,cArBpD,6EAXE,EAmCbU,WAAW,WACT,IAAMT,EAAM,EAAKU,MAAMZ,UACjBa,EAAO,EAAKD,MAAMX,YAClBa,EAAW,yCAAD,OAA0CZ,EAA1C,YAAmDW,GACnEE,OAAOC,KAAKF,EAAW,WArCvB,EAAKF,MAAM,CACTZ,UAAU,GACVC,YAAY,GACZQ,eAAe,cALN,E,gEASXQ,KAAKpB,e,+BAiCL,MACyB,KAAvBoB,KAAKL,MAAMZ,UACV,yBAAKkB,IAAKC,IAAQC,IAAI,YAEtB,yBAAKC,UAAU,uBACZ,yBAAKA,UAAWJ,KAAKL,MAAMH,gBACzB,2BACA,kBAACf,EAAD,CAAa2B,UAAU,qBAAqBC,KAAK,cAAcC,KAAK,KAClEC,MAAO,CAACC,SAAS,SAASC,YAAY,aAExC,8BACCT,KAAKL,MAAMZ,YAGd,yBAAKqB,UAAU,gBACb,8BACGJ,KAAKL,MAAMX,cAGhB,yBAAKoB,UAAU,oBACb,4BAAQA,UAAU,iBAAiBM,QAASV,KAAKN,YAC/C,kBAACjB,EAAD,CAAa2B,UAAU,iBAAiBC,KAAK,UAAUC,KAAK,KAC1DC,MAAO,CAACC,SAAS,cAErB,4BAAQG,GAAG,YAAYD,QAASV,KAAKpB,YAArC,mB,GAnEMgC,aCMEC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.a0a800c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport loader from './loader.svg';\nconst FontAwesome = require('react-fontawesome');\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      quoteText:'',\n      quoteAuthor:'',\n      longQuoteClass:'quote-text'\n    }\n  }\n  componentDidMount(){\n    this.fetchQuote();\n  }\n  fetchQuote=async ()=>{\n    this.setState({quoteText:'',quoteAuthor:''})\n    const proxyUrl='https://salty-woodland-36841.herokuapp.com/'\n    const apiUrl='http://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json';\n    const quote={quoteText:'',quoteAuthor:''}\n    try{\n      const response=await fetch(proxyUrl+apiUrl);\n      const data=await response.json();\n      quote.quoteText=data.quoteText;\n      quote.quoteAuthor=data.quoteAuthor;\n      if(data.quoteText.length>100){\n        this.setState({longQuoteClass:'long-quote'})\n      }else{\n        this.setState({longQuoteClass:'quote-text'})\n      }\n    }catch(err){\n      this.fetchQuote();\n    }finally{\n      this.setState({isLoading:false})\n      quote.quoteAuthor===\"\"?\n      this.setState({quoteText:quote.quoteText,quoteAuthor:'Unkown'}):\n      this.setState({quoteText:quote.quoteText,quoteAuthor:quote.quoteAuthor});  \n    }\n  }\n  tweetQuote=()=>{\n    const quote=this.state.quoteText;\n    const author=this.state.quoteAuthor;\n    const twitterUrl=`https://twitter.com/intent/tweet?text=${quote}-${author}`;\n    window.open(twitterUrl,'_blank');\n  }\n  render(){\n    return (\n      this.state.quoteText===\"\"?\n      (<img src={loader} alt='loading'/>)\n      :\n      (<div className=\"App quote-container\">\n          <div className={this.state.longQuoteClass}>\n            <i>\n            <FontAwesome className='fas fa-quote-right' name='quote-right' size='5x'\n              style={{fontSize:'3.5rem',marginRight:'.75rem'}} />\n            </i>\n            <span> \n            {this.state.quoteText}\n            </span>\n          </div>\n          <div className=\"quote-author\">\n            <span>\n              {this.state.quoteAuthor}\n            </span>\n          </div>\n          <div className=\"button-container\">\n            <button className=\"twitter-button\" onClick={this.tweetQuote}>\n              <FontAwesome className='fab fa-twitter' name='twitter' size='2x'\n                style={{fontSize:'1.70rem'}} />\n            </button>\n            <button id=\"new-quote\" onClick={this.fetchQuote}>New Quote</button>\n          </div>\n        </div>)\n    );\n  }\n  }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loader.f7f1e9fe.svg\";"],"sourceRoot":""}